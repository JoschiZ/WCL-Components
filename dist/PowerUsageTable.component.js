let getComponent;(()=>{"use strict";var e={d:(s,t)=>{for(var r in t)e.o(t,r)&&!e.o(s,r)&&Object.defineProperty(s,r,{enumerable:!0,get:t[r]})},o:(e,s)=>Object.prototype.hasOwnProperty.call(e,s)},s={};e.d(s,{default:()=>a});function t(e){switch(e){case 0:return"Mana";case 1:return"Rage";case 2:return"Focus";case 3:return"Energy";case 4:return"Combo Points";case 5:return"Runes";case 6:return"Runic Power";case 7:return"Soul Shards";case 8:return"Astral Power";case 9:return"Holy Power";case 10:return"Alternate";case 11:return"Maelstrom";case 12:return"Chi";case 13:return"Insanity";case 14:return"Obsolete";case 15:return"Obsolete2";case 16:return"Arcane Charges";case 17:return"Fury";case 18:return"Pain";case 19:return"Essence";case 20:return"Rune Blood (Classic)";case 21:return"Rune Frost (Classic)";case 22:return"Rune Unholy (Classic)";case 23:return"Alternate Quest";case 24:return"Alternate Encounter";case 25:return"Alternate Mount";default:return e+""}}const r=new class{constructor(e){this.messages=[],this.debug=e}addMessage(e,s){if(!this.debug)return;const t={};t[e]=s,this.messages.push(t)}}(!1),a=getComponent=()=>{const e=[];for(const s of reportGroup.fights)e.push(o(s));r.addMessage("Fight Data",e);const s=e[0].GetColumns();r.addMessage("Columns",s);const t=e[0].GetRows(s);r.addMessage("Data Rows",t);const a={component:"Table",props:{columns:{title:{header:"Resource Usage",columns:e[0].GetColumns()}},data:t}};return r.debug?r.messages:a};function o(e){const s=new n,t=function(e,s,t){return e.eventsByCategoryAndDisposition(s,t)}(e,"casts","friendly");for(const e of t)"cast"===e.type&&s.AddCastEvent(e);return s}class n{constructor(){this.players={}}AddCastEvent(e){var s,t,r;e.source&&"Pet"!==e.source.type&&(null!==(s=(t=this.players)[r=e.source.name])&&void 0!==s||(t[r]=new c),this.players[e.source.name].AddCastEvent(e))}GetColumns(){const e={actorName:{header:"Player Name",textAlign:"center"},ability:{header:"Ability Name",textAlign:"center"},castCount:{header:"Casts",textAlign:"center"}},s=new Set;for(const e of Object.values(this.players))for(const t of Object.values(e.abilityDataByName))for(const e in t.totalResourcesUsed)s.add(e);for(const t of s)e[t]={header:t,textAlign:"center"},e[t+"%"]={header:t+"%",textAlign:"center"};return e}GetRows(e){var s;const t=[];for(const r in this.players){const a=this.players[r].getTotalResourcesUsed();for(const o in this.players[r].abilityDataByName){const n=this.players[r].abilityDataByName[o],c={actorName:r,ability:o,castCount:n.Casts};for(const e in n.totalResourcesUsed){const s=n.totalResourcesUsed[e]?n.totalResourcesUsed[e]:"-",t=a[e]?Math.round(n.totalResourcesUsed[e]/a[e]*100):"-";c[e]=s,c[e+"%"]=t}for(const t in e)null!==(s=c[t])&&void 0!==s||(c[t]="-");t.push(c)}}return t}}class c{constructor(){this.abilityDataByName={}}getTotalResourcesUsed(){var e;const s={};for(const t of Object.values(this.abilityDataByName))for(const r in t.totalResourcesUsed)null!==(e=s[r])&&void 0!==e||(s[r]=0),s[r]+=t.totalResourcesUsed[r];return s}AddCastEvent(e){var s,t,r;e.ability&&(null!==(s=(t=this.abilityDataByName)[r=e.ability.name])&&void 0!==s||(t[r]=new u(e.ability.name)),this.abilityDataByName[e.ability.name].AddCastEvent(e))}}class u{constructor(e){this.totalResourcesUsed={},this.Casts=0,this.events=[],r.addMessage("CastEvents "+e,this.events),this.Name=e}AddCastEvent(e){e.sourceResources&&(this.events.push(e),this.Casts++,this.ParseClassResource(e.sourceResources))}ParseClassResource(e){var s,r;if(0!==e.resourceType&&!e.resourceType)return;const a=t(e.resourceType);null!==(s=(r=this.totalResourcesUsed)[a])&&void 0!==s||(r[a]=0),this.totalResourcesUsed[a]+=e.resourceCost,e.additionalResources&&this.ParseAdditionalResources(e.additionalResources)}ParseAdditionalResources(e){var s,r;if(!e.resourceType)return;const a=t(e.resourceType);null!==(s=(r=this.totalResourcesUsed)[a])&&void 0!==s||(r[a]=0),this.totalResourcesUsed[a]+=e.resourceAmount,e.next&&this.ParseAdditionalResources(e.next)}}globalThis.getComponent=s.default})();