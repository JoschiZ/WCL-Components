let getComponent;(()=>{"use strict";var t={d:(e,s)=>{for(var r in s)t.o(s,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:s[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};function s(t,e,s){return t.eventsByCategoryAndDisposition(e,s)}t.d(e,{default:()=>m});const r=(t,e)=>{for(const s of e)for(const e in s)if(t[e]!==s[e])return!0};class i{constructor(t,e={}){this.actors={};for(const s of t){if(!s.ability||!s.target||!s.source)continue;if(s.type.includes("stack"))continue;if("Pet"===s.target.type)continue;if("friendly"!==s.targetDisposition)continue;if(e.auraIds&&!e.auraIds.has(s.ability.id))continue;if(e.fight&&e.fight.isEventExcludedFromDamageRankings(s))continue;if(e.targetFilters&&r(s.target,e.targetFilters))continue;if(e.sourceFilters&&r(s.source,e.sourceFilters))continue;if(e.abilityFilters&&r(s.ability,e.abilityFilters))continue;const t=new a(s.source.id),i=new n(s.target.id),l=new o(s.ability.id);s.type.includes("apply")?this.addActor(t).addTarget(i).addBuff(l).buffApplied(s,e.captureEvent):s.type.includes("remove")&&this.addActor(t).addTarget(i).addBuff(l).buffRemoved(s,e.captureEvent)}}addActor(t){return this.actors[t.id]?this.actors[t.id]:(this.actors[t.id]=t,t)}getAurasBySourceActor(t){if(this.actors[t])return this.actors[t]}getSelfBuff(t,e){return this.actors[t].targets[t].buffs[e]}}class a{constructor(t){this.targets={},this.id=t}addTarget(t){return this.targets[t.id]?this.targets[t.id]:(this.targets[t.id]=t,t)}}class n{constructor(t){this.buffs={},this.id=t}addBuff(t){return this.buffs[t.id]?this.buffs[t.id]:(this.buffs[t.id]=t,t)}}class o{constructor(t){this.applied=[],this.removed=[],this.events={},this.id=t}buffApplied(t,e=!1){this.applied.push(t.timestamp),e&&(this.events[t.timestamp]=t)}buffRemoved(t,e=!1){this.removed.push(t.timestamp),e&&(this.events[t.timestamp]=t)}get appliedTimings(){return this.applied}get removedTimings(){return this.removed}get sortedTimeSpans(){if(this._sortedTimes)return JSON.parse(JSON.stringify(this._sortedTimes));for(this.applied=Array.from(new Set(this.applied)),this.removed=Array.from(new Set(this.removed));this.applied.length<this.removed.length;)this.applied.unshift(0);for(this.applied.sort(((t,e)=>t-e));this.removed.length<this.applied.length;)this.removed.push(1/0);return this.removed.sort(((t,e)=>t-e)),this._sortedTimes=Array.from(Array(Math.max(this.applied.length,this.removed.length)),((t,e)=>[this.applied[e]?this.applied[e]:0,this.removed[e]?this.removed[e]:1/0])),JSON.parse(JSON.stringify(this._sortedTimes))}isTimeInTimeSpans(t){let e=0,s=this.sortedTimeSpans.length-1;for(;e<=s;){const r=Math.floor((e+s)/2),[i,a]=this.sortedTimeSpans[r];if(t>=i&&t<=a)return!0;t<i?s=r-1:e=r+1}return!1}getFullDuration(t){let e=0;const s=this._sortedTimes?this._sortedTimes:this.sortedTimeSpans;for(const r of s){let[s,i]=r;null!=s||(s=t.startTime),null!=i||(i=t.endTime),e+=i-s}return e}}class l{constructor(t,e,s={}){this.targets=new Map,this.options=s,this.logger=e,this.logger.addMessage("Events in Health Manager",t);for(const e of t)for(const t of e){if(!t.targetResources||!t.target)continue;if(s.targetFilters&&r(t.target,s.targetFilters))continue;if(s.sourceFilters&&r(t.source,s.sourceFilters))continue;if(s.abilityFilters&&r(t.ability,s.abilityFilters))continue;this.addTarget(new h(t.target.name,t.target.idInReport,this.logger)).addHealth(t)}for(const t of this.targets)t[1].sortHealth()}addTarget(t){const e=this.targets.get(t.id);return e||(this.targets.set(t.id,t),t)}getHealth(t,e,s){const r=this.targets.get(t);if(!r)return 1/0;const i=r.getHealth(e,s);return i||1/0}}class h{constructor(t,e,s){this.maxHealth=0,this.health=new Map,this.name=t,this.id=e,this.logger=s}sortHealth(){this.health=new Map([...this.health.entries()].sort())}addHealth(t){if(!t.target||!t.targetResources)return;let e=t.targetResources.hitPoints;if("damage"===t.type){if(e-=t.amount,e<=0)return;this.health.set(t.timestamp+1,e)}"heal"===t.type?(e+=t.amount,this.health.set(t.timestamp+1,e)):this.health.set(t.timestamp,e),this.maxHealth=t.targetResources.maxHitPoints}getHealth(t,e){this.logger.addMessage("Checking health at",{timestamp:t,health:Object.fromEntries(this.health)});const s=this.health.get(t);if(s)return s;if(0===this.health.size)return null;let r=null,i=null;if("before"===e){r=this.maxHealth;for(const[e,s]of this.health){if(e>t){this.logger.addMessage("broke with",{breakTime:e,currentTime:i});break}i=e,r=s}return this.logger.addMessage("returned health",{currentTime:i,currentHealth:r,timestamp:t}),r}if("after"===e){for(const[e,s]of this.health)if(r=s,i=e,e>t)break;return this.logger.addMessage("returned health",{currentTime:i,currentHealth:r,timestamp:t}),r}return this.getClosestHealth(t)}getClosestHealth(t){let e=null,s=1/0,r=null;for(const[i,a]of this.health){null!=e||(e=a);const n=Math.abs(i-t);if(!(n<=s))break;e=a,s=n,r=i}return this.logger.addMessage("returned health",{currentTime:r,currentHealth:e,timestamp:t}),e}}function d(t,e){return{component:"EnhancedMarkdown",props:{content:`\n<u># ${t} Error</u>\n${e}\n`}}}function u(t){return`${Math.floor(t/6e4)}:${Math.round(t%6e4/1e3)}`}const c="Alter Time Healing",g=new class{constructor(t){this.messages=[],this.debug=t}addMessage(t,e){if(!this.debug)return;const s={};s[t]=e,this.messages.push(s)}}(false),f=342246,p=342247,m=getComponent=()=>{if(1!==reportGroup.fights.length)return d(c,"Please select a single fight");const t=reportGroup.fights[0];if(0===t.combatantInfoEvents.length)return d(c,"Sadly this component relies on real encounters and won't work with trash fights.");if(1!==t.combatantInfoEvents.length)return d(c,"Please select a single <Mage>");const e=t.combatantInfoEvents[0].source;if(!e||"Mage"!==e.subType)return d(c,"Please select a single <Mage>");const r=function(t,e){const r=s(t,"aurasGained","friendly"),a=new i(r,{sourceFilters:[{idInReport:e.idInReport}],auraIds:new Set([f]),captureEvent:!0});g.addMessage("BuffManager",a);const n=s(t,"healing","friendly"),o=s(t,"damage","enemy"),h=new l([n,o],g,{targetFilters:[{idInReport:e.idInReport}]});if(!a.actors[e.id]||!a.actors[e.id].targets[e.id]||!a.actors[e.id].targets[e.id].buffs[342246])return[];const d=a.actors[e.id].targets[e.id].buffs[342246].sortedTimeSpans,c=[];let p=0;for(const[s,r]of d){let i=h.getHealth(e.idInReport,s,"before");const a=h.getHealth(e.idInReport,r,"before");g.addMessage("AT",{startHealth:i,endHealth:a,start:s,end:r});if(Math.round(r/1e3)-Math.round(s/1e3)<10&&!b(t,e,r)){g.addMessage("canceled",`AT Skipped at ${u(r-t.startTime)}, ${s} - ${r}`);continue}const n=i-a;p+=n;const o=n>=0?n+"":`<span style='color:red'>${n}</span>`,l=u(r-t.startTime),d=n>=0?l+"":`<span style='color:red'>${l}</span>`;c.push({timestamp:d,amount:o})}const m=p>=0?`<span style='font-weight: bold'>${p}</span>`:`<span style='color:red; font-weight: bold'>${p}</span>`,y=p>=0?"<span style='font-weight: bold'>overall</span>":"<span style='color:red; font-weight: bold'>overall</span>";return c.push({timestamp:y,amount:m}),c}(t,e),a={component:"EnhancedMarkdown",props:{content:`\n# ${c}\n<Mage>${e.name}</Mage> did not use <AbilityIcon id={ALTER_TIME_ID} icon="spell_mage_altertime.jpg">Alter Time</AbilityIcon> or all usages got canceled.\n`}};if(0===r.length)return a;return{component:"Table",props:{columns:{title:{header:`<a href="https://www.wowhead.com/spell=342245">Alter Time</a> Healing Done by <Mage>${e.name}</Mage>`,columns:{timestamp:{header:"Timestamp",textAlign:"center"},amount:{header:"Amount",textAlign:"center"}}}},data:r}}};function b(t,e,r){const i=s(t,"casts","friendly");for(const t of i)if(t.ability&&t.ability.id===p&&t.source&&t.source.idInReport===e.idInReport&&t.timestamp===r)return!0;return!1}globalThis.getComponent=e.default})();